#!/usr/bin/env python3
"""
Point d'entr√©e principal pour demo_api

Ce fichier sert maintenant de point d'entr√©e unifi√© qui redirige vers la CLI
ou ex√©cute directement les fonctionnalit√©s pour maintenir la compatibilit√©.
"""

import sys
import argparse
from pathlib import Path

# Imports pour la compatibilit√© avec l'ancien comportement
from utils.api import Api
from utils.services import ReportService, VMService
from utils.logging_config import get_logger
from utils.config import config

logger = get_logger(__name__)


def run_legacy_report_generation():
    """Ex√©cute la g√©n√©ration de rapports selon l'ancien comportement"""
    logger.info("Ex√©cution en mode legacy: g√©n√©ration de rapport")
    
    api = Api(config.DEMO_API_BASE_URL)
    report_service = ReportService(api)
    report_file = report_service.generate_users_vms_report("vm_users.json")
    
    if report_file:
        print(f"‚úÖ Rapport g√©n√©r√©: {report_file}")
    else:
        print("‚ùå √âchec de la g√©n√©ration du rapport")


def run_legacy_vm_creation():
    """Ex√©cute la cr√©ation de VM selon l'ancien comportement"""
    logger.info("Ex√©cution en mode legacy: cr√©ation de VM")
    
    api = Api(config.DEMO_API_BASE_URL)
    vm_service = VMService(api)
    
    # Authentification
    user = vm_service.authenticate_user(
        email=config.DEMO_API_EMAIL or "jean@dupont21.com",
        password=config.DEMO_API_PASSWORD
    )
    
    if user:
        print(f"‚úÖ Utilisateur authentifi√©: {user.get('name')}")
        vm_result = vm_service.create_default_vm_for_user(user)
        
        if vm_result:
            print(f"‚úÖ VM cr√©√©e: {vm_result.get('name')} (ID: {vm_result.get('id')})")
        else:
            print("‚ùå √âchec de la cr√©ation de la VM")
    else:
        print("‚ùå √âchec de l'authentification")


def run_legacy_mode():
    """Ex√©cute les deux op√©rations principales comme dans l'ancien comportement"""
    logger.info("Ex√©cution en mode legacy complet")
    print("üöÄ D√©marrage de demo_api en mode legacy")
    print("-" * 50)
    
    print("\nüìä G√©n√©ration de rapport...")
    run_legacy_report_generation()
    
    print("\nüñ•Ô∏è  Cr√©ation de VM...")
    run_legacy_vm_creation()
    
    print("\n‚úÖ Ex√©cution termin√©e")


def setup_argument_parser():
    """Configuration du parser d'arguments"""
    parser = argparse.ArgumentParser(
        prog="python main.py",
        description="Point d'entr√©e principal pour demo_api",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python main.py                           # Mode legacy (rapport + cr√©ation VM)
  python main.py --cli report --report-type all
  python main.py --cli vm create --name "Ma VM"
  python main.py --legacy                  # Forcer le mode legacy
        """
    )
    
    parser.add_argument(
        "--legacy",
        action="store_true",
        help="Forcer l'ex√©cution en mode legacy (compatibilit√©)"
    )
    
    parser.add_argument(
        "--cli",
        dest="cli_command",
        nargs="+",
        help="Ex√©cuter une commande CLI sp√©cifique"
    )
    
    return parser


def main():
    """Point d'entr√©e principal"""
    
    parser = setup_argument_parser()
    args, unknown_args = parser.parse_known_args()
    
    logger.info("D√©marrage de demo_api", legacy_mode=args.legacy, cli_command=args.cli_command)
    
    try:
        if args.legacy or not args.cli_command:
            # Mode legacy : compatibilit√© avec l'ancien comportement
            run_legacy_mode()
        else:
            # Mode CLI : redirection vers la CLI
            # Pr√©parer les arguments pour la CLI
            cli_args = ["cli/main.py"] + args.cli_command + unknown_args
            
            # Remplacer sys.argv pour la CLI
            original_argv = sys.argv
            sys.argv = cli_args
            
            try:
                # Importer et ex√©cuter la CLI
                sys.path.insert(0, str(Path(__file__).parent / "cli"))
                from cli.main import main as cli_main
                cli_main()
            finally:
                # Restaurer sys.argv original
                sys.argv = original_argv
                
    except KeyboardInterrupt:
        logger.info("Ex√©cution interrompue par l'utilisateur")
        print("\n‚ö†Ô∏è  Ex√©cution interrompue")
    except (ImportError, OSError, AttributeError) as e:
        logger.error("Erreur lors de l'ex√©cution", error=str(e))
        print(f"‚ùå Erreur: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()