#!/usr/bin/env python3
"""
Script pour cr√©er des donn√©es via l'API en utilisant le g√©n√©rateur Faker.

Ce script utilise l'API unifi√©e pour cr√©er des utilisateurs et des VMs
avec des donn√©es g√©n√©r√©es par Faker, permettant de peupler la base de donn√©es
avec des donn√©es r√©alistes.
"""

import typer
import time
import sys
from typing import Optional, List, Dict, Any
from pathlib import Path
import json
from datetime import datetime
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.table import Table
from rich.panel import Panel
from rich.text import Text

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(str(Path(__file__).parent.parent))

from utils.api import ApiClient, create_authenticated_client
from utils.data_generator import UserDataGenerator, VMDataGenerator
from utils.logging_config import get_logger

logger = get_logger(__name__)

app = typer.Typer(
    name="create-data-via-api",
    help="üöÄ Cr√©ateur de donn√©es via API avec Faker",
    rich_markup_mode="markdown",
    add_completion=False,
    no_args_is_help=True,
)


def create_users_via_api(
    api_client: ApiClient,
    user_count: int,
    batch_size: int = 10,
    delay_between_batches: float = 0.5,
) -> List[Dict[str, Any]]:
    """
    Cr√©e des utilisateurs via l'API en utilisant le g√©n√©rateur Faker.

    Args:
        api_client: Client API authentifi√©
        user_count: Nombre d'utilisateurs √† cr√©er
        batch_size: Nombre d'utilisateurs √† cr√©er par lot
        delay_between_batches: D√©lai entre les lots (en secondes)

    Returns:
        Liste des utilisateurs cr√©√©s
    """
    logger.info(
        "Cr√©ation d'utilisateurs via API", count=user_count, batch_size=batch_size
    )

    created_users = []
    created_count = 0

    for batch_start in range(0, user_count, batch_size):
        batch_end = min(batch_start + batch_size, user_count)
        batch_size_actual = batch_end - batch_start

        typer.echo(
            f"üìù Cr√©ation du lot {batch_start // batch_size + 1}: utilisateurs {batch_start + 1}-{batch_end}"
        )

        for i in range(batch_size_actual):
            try:
                # G√©n√©rer les donn√©es utilisateur avec Faker
                user_data = UserDataGenerator.generate_user(created_count + 1)

                # Cr√©er l'utilisateur via l'API
                created_user = api_client.users.create_user(
                    name=user_data["name"],
                    email=user_data["email"],
                    password="password123",  # Mot de passe par d√©faut
                )

                created_users.append(created_user)
                created_count += 1

                typer.echo(f"   ‚úÖ {user_data['name']} ({user_data['email']})")

            except (ValueError, KeyError, ConnectionError) as e:
                logger.error(
                    "Erreur lors de la cr√©ation d'un utilisateur", error=str(e)
                )
                typer.echo(f"   ‚ùå Erreur pour l'utilisateur {i + 1}: {e}")

        # D√©lai entre les lots pour √©viter de surcharger l'API
        if batch_end < user_count:
            time.sleep(delay_between_batches)

    logger.info("Utilisateurs cr√©√©s avec succ√®s", count=len(created_users))
    return created_users


def create_vms_via_api(
    api_client: ApiClient,
    vm_count: int,
    user_ids: List[int],
    batch_size: int = 10,
    delay_between_batches: float = 0.5,
) -> List[Dict[str, Any]]:
    """
    Cr√©e des VMs via l'API en utilisant le g√©n√©rateur Faker.

    Args:
        api_client: Client API authentifi√©
        vm_count: Nombre de VMs √† cr√©er
        user_ids: Liste des IDs d'utilisateurs disponibles
        batch_size: Nombre de VMs √† cr√©er par lot
        delay_between_batches: D√©lai entre les lots (en secondes)

    Returns:
        Liste des VMs cr√©√©es
    """
    logger.info(
        "Cr√©ation de VMs via API", count=vm_count, available_users=len(user_ids)
    )

    created_vms = []
    created_count = 0

    for batch_start in range(0, vm_count, batch_size):
        batch_end = min(batch_start + batch_size, vm_count)
        batch_size_actual = batch_end - batch_start

        typer.echo(
            f"üñ•Ô∏è Cr√©ation du lot {batch_start // batch_size + 1}: VMs {batch_start + 1}-{batch_end}"
        )

        for i in range(batch_size_actual):
            try:
                # G√©n√©rer les donn√©es VM avec Faker
                vm_data = VMDataGenerator.generate_vm(
                    user_id=user_ids[created_count % len(user_ids)],
                    vm_id=created_count + 1,
                )

                # Cr√©er la VM via l'API
                created_vm = api_client.vms.create(
                    user_id=vm_data["user_id"],
                    name=vm_data["name"],
                    operating_system=vm_data["operating_system"],
                    cpu_cores=vm_data["cpu_cores"],
                    ram_gb=vm_data["ram_gb"],
                    disk_gb=vm_data["disk_gb"],
                    status=vm_data["status"],
                )

                created_vms.append(created_vm)
                created_count += 1

                typer.echo(
                    f"   ‚úÖ {vm_data['name']} ({vm_data['operating_system']}) - {vm_data['cpu_cores']}c/{vm_data['ram_gb']}GB"
                )

            except (ValueError, KeyError, ConnectionError) as e:
                logger.error("Erreur lors de la cr√©ation d'une VM", error=str(e))
                typer.echo(f"   ‚ùå Erreur pour la VM {i + 1}: {e}")

        # D√©lai entre les lots pour √©viter de surcharger l'API
        if batch_end < vm_count:
            time.sleep(delay_between_batches)

    logger.info("VMs cr√©√©es avec succ√®s", count=len(created_vms))
    return created_vms


@app.command()
def users(
    count: int = typer.Option(
        10, "--count", "-c", help="Nombre d'utilisateurs √† cr√©er", min=1, max=100
    ),
    batch_size: int = typer.Option(
        5, "--batch-size", "-b", help="Taille des lots", min=1, max=20
    ),
    delay: float = typer.Option(
        0.5, "--delay", "-d", help="D√©lai entre les lots (secondes)", min=0.1, max=5.0
    ),
    email: Optional[str] = typer.Option(
        None, "--email", "-e", help="Email pour l'authentification API"
    ),
    password: Optional[str] = typer.Option(
        None, "--password", "-p", help="Mot de passe pour l'authentification API"
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Mode verbeux"),
) -> None:
    """
    üë• Cr√©er des utilisateurs via l'API avec des donn√©es Faker

    G√©n√®re des utilisateurs r√©alistes avec Faker et les cr√©e via l'API.

    Exemples:

    \b
    python create_data_via_api.py users --count 20
    python create_data_via_api.py users -c 50 --batch-size 10 --delay 1.0
    python create_data_via_api.py users --email admin@example.com --password secret
    """
    typer.echo(f"üë• Cr√©ation de {count} utilisateurs via l'API...")

    try:
        # Cr√©er le client API avec authentification
        api_client = create_authenticated_client(email=email, password=password)

        if not api_client.is_authenticated():
            typer.echo("‚ùå Impossible de s'authentifier avec l'API")
            typer.echo(
                "üí° Utilisez --email et --password ou configurez les identifiants dans la config"
            )
            raise typer.Exit(1)

        typer.echo(f"üîê Authentifi√© avec succ√®s sur {api_client.base_url}")

        # Cr√©er les utilisateurs
        created_users = create_users_via_api(
            api_client=api_client,
            user_count=count,
            batch_size=batch_size,
            delay_between_batches=delay,
        )

        # Statistiques
        typer.echo(f"\n‚úÖ Cr√©ation termin√©e !")
        typer.echo(f"üìä Statistiques:")
        typer.echo(f"   ‚Ä¢ Utilisateurs cr√©√©s: {len(created_users)}")
        typer.echo(f"   ‚Ä¢ Taux de succ√®s: {len(created_users) / count * 100:.1f}%")

        if verbose and created_users:
            typer.echo(f"\nüîç Aper√ßu des utilisateurs cr√©√©s:")
            for i, user in enumerate(created_users[:5]):
                typer.echo(
                    f"   {i + 1}. {user.get('name', 'N/A')} ({user.get('email', 'N/A')})"
                )
            if len(created_users) > 5:
                typer.echo(f"   ... et {len(created_users) - 5} autres utilisateurs")

    except Exception as e:
        logger.error("Erreur lors de la cr√©ation des utilisateurs", error=str(e))
        typer.echo(f"‚ùå Erreur lors de la cr√©ation: {e}")
        raise typer.Exit(1)


@app.command()
def vms(
    count: int = typer.Option(
        20, "--count", "-c", help="Nombre de VMs √† cr√©er", min=1, max=200
    ),
    batch_size: int = typer.Option(
        5, "--batch-size", "-b", help="Taille des lots", min=1, max=20
    ),
    delay: float = typer.Option(
        0.5, "--delay", "-d", help="D√©lai entre les lots (secondes)", min=0.1, max=5.0
    ),
    email: Optional[str] = typer.Option(
        None, "--email", "-e", help="Email pour l'authentification API"
    ),
    password: Optional[str] = typer.Option(
        None, "--password", "-p", help="Mot de passe pour l'authentification API"
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Mode verbeux"),
) -> None:
    """
    üñ•Ô∏è Cr√©er des VMs via l'API avec des donn√©es Faker

    G√©n√®re des VMs r√©alistes avec Faker et les cr√©e via l'API.
    Les VMs sont associ√©es √† des utilisateurs existants.

    Exemples:

    \b
    python create_data_via_api.py vms --count 50
    python create_data_via_api.py vms -c 100 --batch-size 10 --delay 1.0
    python create_data_via_api.py vms --email admin@example.com --password secret
    """
    typer.echo(f"üñ•Ô∏è Cr√©ation de {count} VMs via l'API...")

    try:
        # Cr√©er le client API avec authentification
        api_client = create_authenticated_client(email=email, password=password)

        if not api_client.is_authenticated():
            typer.echo("‚ùå Impossible de s'authentifier avec l'API")
            typer.echo(
                "üí° Utilisez --email et --password ou configurez les identifiants dans la config"
            )
            raise typer.Exit(1)

        typer.echo(f"üîê Authentifi√© avec succ√®s sur {api_client.base_url}")

        # R√©cup√©rer les utilisateurs existants
        typer.echo("üìã R√©cup√©ration des utilisateurs existants...")
        existing_users = api_client.users.get()

        if not existing_users:
            typer.echo("‚ùå Aucun utilisateur trouv√© dans l'API")
            typer.echo("üí° Cr√©ez d'abord des utilisateurs avec la commande 'users'")
            raise typer.Exit(1)

        user_ids = [user["id"] for user in existing_users]
        typer.echo(
            f"üë• {len(user_ids)} utilisateurs disponibles pour l'association des VMs"
        )

        # Cr√©er les VMs
        created_vms = create_vms_via_api(
            api_client=api_client,
            vm_count=count,
            user_ids=user_ids,
            batch_size=batch_size,
            delay_between_batches=delay,
        )

        # Statistiques
        typer.echo(f"\n‚úÖ Cr√©ation termin√©e !")
        typer.echo(f"üìä Statistiques:")
        typer.echo(f"   ‚Ä¢ VMs cr√©√©es: {len(created_vms)}")
        typer.echo(f"   ‚Ä¢ Taux de succ√®s: {len(created_vms) / count * 100:.1f}%")

        if verbose and created_vms:
            typer.echo(f"\nüîç Aper√ßu des VMs cr√©√©es:")
            for i, vm in enumerate(created_vms[:5]):
                typer.echo(
                    f"   {i + 1}. {vm.get('name', 'N/A')} ({vm.get('operating_system', 'N/A')})"
                )
            if len(created_vms) > 5:
                typer.echo(f"   ... et {len(created_vms) - 5} autres VMs")

    except Exception as e:
        logger.error("Erreur lors de la cr√©ation des VMs", error=str(e))
        typer.echo(f"‚ùå Erreur lors de la cr√©ation: {e}")
        raise typer.Exit(1)


@app.command()
def full_dataset(
    user_count: int = typer.Option(
        20, "--users", "-u", help="Nombre d'utilisateurs √† cr√©er", min=1, max=100
    ),
    vm_count: int = typer.Option(
        50, "--vms", "-v", help="Nombre de VMs √† cr√©er", min=1, max=200
    ),
    batch_size: int = typer.Option(
        5, "--batch-size", "-b", help="Taille des lots", min=1, max=20
    ),
    delay: float = typer.Option(
        0.5, "--delay", "-d", help="D√©lai entre les lots (secondes)", min=0.1, max=5.0
    ),
    email: Optional[str] = typer.Option(
        None, "--email", "-e", help="Email pour l'authentification API"
    ),
    password: Optional[str] = typer.Option(
        None, "--password", "-p", help="Mot de passe pour l'authentification API"
    ),
    output_file: Optional[str] = typer.Option(
        None,
        "--output",
        "-o",
        help="Fichier de sortie pour sauvegarder les donn√©es cr√©√©es",
    ),
    verbose: bool = typer.Option(False, "--verbose", "-v", help="Mode verbeux"),
) -> None:
    """
    üéØ Cr√©er un dataset complet via l'API avec des donn√©es Faker

    Cr√©e des utilisateurs et des VMs r√©alistes avec Faker via l'API.
    Optionnellement sauvegarde les donn√©es cr√©√©es dans un fichier JSON.

    Exemples:

    \b
    python create_data_via_api.py full-dataset --users 20 --vms 50
    python create_data_via_api.py full-dataset -u 30 -v 100 --output dataset.json
    python create_data_via_api.py full-dataset --email admin@example.com --password secret
    """
    typer.echo(
        f"üéØ Cr√©ation d'un dataset complet: {user_count} utilisateurs + {vm_count} VMs"
    )

    try:
        # Cr√©er le client API avec authentification
        api_client = create_authenticated_client(email=email, password=password)

        if not api_client.is_authenticated():
            typer.echo("‚ùå Impossible de s'authentifier avec l'API")
            typer.echo(
                "üí° Utilisez --email et --password ou configurez les identifiants dans la config"
            )
            raise typer.Exit(1)

        typer.echo(f"üîê Authentifi√© avec succ√®s sur {api_client.base_url}")

        # √âtape 1: Cr√©er les utilisateurs
        typer.echo(f"\nüë• √âtape 1/2: Cr√©ation de {user_count} utilisateurs...")
        created_users = create_users_via_api(
            api_client=api_client,
            user_count=user_count,
            batch_size=batch_size,
            delay_between_batches=delay,
        )

        # √âtape 2: Cr√©er les VMs
        typer.echo(f"\nüñ•Ô∏è √âtape 2/2: Cr√©ation de {vm_count} VMs...")
        user_ids = [user["id"] for user in created_users]
        created_vms = create_vms_via_api(
            api_client=api_client,
            vm_count=vm_count,
            user_ids=user_ids,
            batch_size=batch_size,
            delay_between_batches=delay,
        )

        # Statistiques finales
        typer.echo(f"\n‚úÖ Dataset cr√©√© avec succ√®s !")
        typer.echo(f"üìä Statistiques finales:")
        typer.echo(f"   ‚Ä¢ Utilisateurs cr√©√©s: {len(created_users)}")
        typer.echo(f"   ‚Ä¢ VMs cr√©√©es: {len(created_vms)}")
        typer.echo(
            f"   ‚Ä¢ Taux de succ√®s utilisateurs: {len(created_users) / user_count * 100:.1f}%"
        )
        typer.echo(f"   ‚Ä¢ Taux de succ√®s VMs: {len(created_vms) / vm_count * 100:.1f}%")

        # Sauvegarder les donn√©es si demand√©
        if output_file:
            dataset = {
                "created_at": datetime.now().isoformat(),
                "users": created_users,
                "vms": created_vms,
                "statistics": {
                    "total_users": len(created_users),
                    "total_vms": len(created_vms),
                    "user_success_rate": len(created_users) / user_count * 100,
                    "vm_success_rate": len(created_vms) / vm_count * 100,
                },
            }

            output_path = Path(output_file)
            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(dataset, f, indent=4, ensure_ascii=False, default=str)

            typer.echo(f"üíæ Dataset sauvegard√©: {output_path.absolute()}")

        if verbose:
            typer.echo(f"\nüîç Aper√ßu des donn√©es cr√©√©es:")
            typer.echo(f"üë• Utilisateurs (premiers 3):")
            for i, user in enumerate(created_users[:3]):
                typer.echo(
                    f"   {i + 1}. {user.get('name', 'N/A')} ({user.get('email', 'N/A')})"
                )

            typer.echo(f"üñ•Ô∏è VMs (premiers 3):")
            for i, vm in enumerate(created_vms[:3]):
                typer.echo(
                    f"   {i + 1}. {vm.get('name', 'N/A')} ({vm.get('operating_system', 'N/A')})"
                )

    except Exception as e:
        logger.error("Erreur lors de la cr√©ation du dataset", error=str(e))
        typer.echo(f"‚ùå Erreur lors de la cr√©ation: {e}")
        raise typer.Exit(1)


@app.command()
def status(
    email: Optional[str] = typer.Option(
        None, "--email", "-e", help="Email pour l'authentification API"
    ),
    password: Optional[str] = typer.Option(
        None, "--password", "-p", help="Mot de passe pour l'authentification API"
    ),
) -> None:
    """
    üìä Afficher le statut actuel de l'API

    R√©cup√®re et affiche les statistiques actuelles des utilisateurs et VMs.

    Exemples:

    \b
    python create_data_via_api.py status
    python create_data_via_api.py status --email admin@example.com --password secret
    """
    typer.echo("üìä R√©cup√©ration du statut de l'API...")

    try:
        # Cr√©er le client API avec authentification
        api_client = create_authenticated_client(email=email, password=password)

        if not api_client.is_authenticated():
            typer.echo("‚ùå Impossible de s'authentifier avec l'API")
            typer.echo(
                "üí° Utilisez --email et --password ou configurez les identifiants dans la config"
            )
            raise typer.Exit(1)

        typer.echo(f"üîê Authentifi√© avec succ√®s sur {api_client.base_url}")

        # R√©cup√©rer toutes les donn√©es
        typer.echo("üìã R√©cup√©ration des donn√©es...")
        all_data = api_client.get_all_data()

        # Afficher les statistiques
        typer.echo(f"\nüìä Statut actuel de l'API:")
        typer.echo(f"   ‚Ä¢ URL de l'API: {api_client.base_url}")
        typer.echo(f"   ‚Ä¢ Utilisateurs total: {all_data['total_users']}")
        typer.echo(f"   ‚Ä¢ VMs totales: {all_data['total_vms']}")
        typer.echo(f"   ‚Ä¢ Utilisateurs avec VMs: {all_data['users_with_vms']}")

        if all_data["total_users"] > 0:
            avg_vms = all_data["total_vms"] / all_data["total_users"]
            typer.echo(f"   ‚Ä¢ Moyenne VMs/utilisateur: {avg_vms:.1f}")

    except Exception as e:
        logger.error("Erreur lors de la r√©cup√©ration du statut", error=str(e))
        typer.echo(f"‚ùå Erreur lors de la r√©cup√©ration: {e}")
        raise typer.Exit(1)


@app.command()
def version() -> None:
    """üìã Afficher la version du cr√©ateur de donn√©es"""
    typer.echo("create-data-via-api v1.0.0")
    typer.echo("Powered by Faker üé≤ + API unifi√©e üöÄ")


def main():
    """Point d'entr√©e principal"""

    # G√©rer -h comme alias pour --help
    if "-h" in sys.argv and "--help" not in sys.argv:
        sys.argv[sys.argv.index("-h")] = "--help"

    try:
        app()
    except KeyboardInterrupt:
        typer.echo("\n‚ö†Ô∏è  Cr√©ation interrompue")
    except Exception as e:
        typer.echo(f"‚ùå Erreur: {e}")
        raise typer.Exit(1)


if __name__ == "__main__":
    main()
