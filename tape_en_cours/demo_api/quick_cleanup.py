#!/usr/bin/env python3
"""
Script de nettoyage simplifi√© pour les VMs et utilisateurs avec Typer et Rich
Utilise des fonctions modulaires pour une meilleure lisibilit√©
"""

import sys
import time
from typing import Optional, Tuple
import typer
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.table import Table
from rich.panel import Panel

from utils.api import create_authenticated_client
from utils.logging_config import get_logger

# Configuration
app = typer.Typer(
    name="cleanup",
    help="üßπ Script de nettoyage pour les VMs et utilisateurs",
    rich_markup_mode="rich",
)
console = Console()
logger = get_logger(__name__)


# =============================================================================
# PARTIE REPR√âSENTATION / AFFICHAGE
# =============================================================================

def display_header(simulate: bool) -> None:
    """Affiche l'en-t√™te selon le mode"""
    if simulate:
        console.print(
            Panel.fit(
                "[bold blue]üßπ MODE SIMULATION[/bold blue]\n"
                "Aucune donn√©e ne sera supprim√©e",
                border_style="blue",
            )
        )
    else:
        console.print(
            Panel.fit(
                "[bold red]üóëÔ∏è MODE SUPPRESSION R√âELLE[/bold red]\n"
                "‚ö†Ô∏è TOUTES LES DONN√âES SERONT SUPPRIM√âES !",
                border_style="red",
            )
        )


def display_api_config(client) -> None:
    """Affiche la configuration de l'API"""
    config_table = Table(title="üîó Configuration API")
    config_table.add_column("Param√®tre", style="cyan")
    config_table.add_column("Valeur", style="magenta")

    config_table.add_row("Base URL", client.base_url)
    config_table.add_row(
        "Authentifi√©", "‚úÖ Oui" if client.is_authenticated() else "‚ùå Non"
    )

    console.print(config_table)
    console.print()


def display_operation_config(delay: float, simulate: bool) -> None:
    """Affiche la configuration des op√©rations"""
    config_table = Table(title="üîß Configuration")
    config_table.add_column("Param√®tre", style="cyan")
    config_table.add_column("Valeur", style="magenta")
    config_table.add_row("D√©lai entre op√©rations", f"{delay}s")
    config_table.add_row("Mode", "Simulation" if simulate else "Suppression r√©elle")
    console.print(config_table)
    console.print()


def display_simulation_message() -> None:
    """Affiche le message de simulation"""
    console.print(
        Panel.fit(
            "[bold blue]üìã Mode simulation - aucune suppression r√©elle[/bold blue]\n"
            "Utilisez [bold]--real[/bold] pour effectuer les suppressions",
            border_style="blue",
        )
    )


# =============================================================================
# PARTIE MANIPULATION DES DONN√âES
# =============================================================================

def connect_to_api(
    base_url: Optional[str], email: Optional[str], password: Optional[str]
):
    """Se connecte √† l'API et retourne le client"""
    with console.status("[bold green]Connexion √† l'API..."):
        client = create_authenticated_client(base_url, email, password)
    return client


def fetch_data(client) -> Tuple[list, list]:
    """R√©cup√®re les donn√©es VMs et utilisateurs"""
    # R√©cup√©ration VMs
    console.print("[bold cyan]üìä Donn√©es actuelles:[/bold cyan]")

    try:
        with console.status("[bold green]R√©cup√©rations des VMs..."):
            vms = client.vms.get()
        display_vms_table(vms)
        console.print()
    except Exception as e:
        console.print(f"[red]‚ùå Erreur VMs: {e}[/red]")
        vms = []

    # R√©cup√©ration utilisateurs
    try:
        with console.status("[bold green]R√©cup√©ration des utilisateurs..."):
            users = client.users.get()
        display_users_table(users)
        console.print()
    except Exception as e:
        console.print(f"[red]‚ùå Erreur Utilisateurs: {e}[/red]")
        users = []

    return vms, users


def display_vms_table(vms: list) -> None:
    """Affiche les VMs dans un tableau"""
    table = Table(title="üíª Machines virtuelles")
    table.add_column("ID", style="cyan")
    table.add_column("Nom", style="green")
    table.add_column("Utilisateur", style="yellow")
    table.add_column("Status", style="magenta")

    console.print(f"[green]‚úÖ {len(vms)} VMs trouv√©es[/green]")

    for vm in vms:
        table.add_row(
            str(vm["id"]), vm["name"], str(vm["user_id"]), vm.get("status", "Inconnu")
        )

    console.print(table)


def display_users_table(users: list) -> None:
    """Affiche les utilisateurs dans un tableau"""
    table = Table(title="üë• Utilisateurs")
    table.add_column("ID", style="cyan")
    table.add_column("Nom", style="green")
    table.add_column("Email", style="yellow")

    console.print(f"[green]‚úÖ {len(users)} utilisateurs trouv√©s[/green]")

    for user in users:
        table.add_row(str(user["id"]), user["name"], user["email"])

    console.print(table)


def display_deletion_progress(item_type: str, delay: float) -> None:
    """Affiche le panneau de suppression"""
    console.print(
        Panel.fit(
            f"[bold red]üóëÔ∏è  Suppression des {item_type}s...[/bold red]\n"
            f"D√©lai: [bold]{delay}s[/bold]",
            border_style="red",
        )
    )


def display_deletion_result(item_type: str, deleted_count: int, total_count: int) -> None:
    """Affiche le r√©sultat de suppression"""
    console.print(
        f"[bold cyan]üìä {item_type}s supprim√©s: [green]{deleted_count}/{total_count}[/green][/bold cyan]"
    )


def display_pause_message(delay: float, context: str = "") -> None:
    """Affiche un message de pause"""
    if context:
        console.print(f"[dim]‚è±Ô∏è  {context} ({delay}s)...[/dim]")
    else:
        console.print(f"[dim]‚è±Ô∏è  Pause de {delay}s...[/dim]")


def display_success_message(item_type: str, item_name: str) -> None:
    """Affiche un message de succ√®s"""
    console.print(f"[green]‚úÖ {item_type} supprim√©: [bold]{item_name}[/bold][/green]")


def display_error_message(item_type: str, item_id: str, error: str) -> None:
    """Affiche un message d'erreur"""
    console.print(f"[red]‚ùå Erreur suppression {item_type} {item_id}: {error}[/red]")


def show_summary(vms: list, users: list, deleted_vms: int, deleted_users: int) -> None:
    """Affiche le r√©sum√© final"""
    total_deleted = deleted_vms + deleted_users

    summary_table = Table(title="üéØ R√©sum√© du nettoyage")
    summary_table.add_column("Type", style="cyan")
    summary_table.add_column("Supprim√©", style="green")
    summary_table.add_column("Total", style="yellow")

    summary_table.add_row("VMs", str(deleted_vms), str(len(vms)))
    summary_table.add_row("Utilisateurs", str(deleted_users), str(len(users)))
    summary_table.add_row(
        "**TOTAL**",
        f"[bold]{total_deleted}[/bold]",
        f"[bold]{len(vms) + len(users)}[/bold]",
    )

    console.print(summary_table)
    console.print(
        Panel.fit(
            "[bold green]‚úÖ NETTOYAGE TERMIN√â AVEC SUCC√àS ![/bold green]",
            border_style="green",
        )
    )


# =============================================================================
# FONCTIONS PURES DE MANIPULATION DES DONN√âES
# =============================================================================

def delete_vm_data(client, vm: dict) -> bool:
    """Supprime une VM (logique pure sans affichage)"""
    try:
        client.vms.delete(vm["id"])
        return True
    except Exception:
        return False


def delete_user_data(client, user: dict) -> bool:
    """Supprime un utilisateur (logique pure sans affichage)"""
    try:
        client.users.delete_user(user["id"])
        return True
    except Exception:
        return False


def delete_items_batch(client, items: list, item_type: str, delay: float) -> int:
    """Supprime une liste d'√©l√©ments avec gestion des pauses
    
    Args:
        client: Client API
        items: Liste des √©l√©ments √† supprimer
        item_type: Type d'√©l√©ment ('vm' ou 'user')
        delay: D√©lai entre suppressions
        
    Returns:
        Nombre d'√©l√©ments supprim√©s
    """
    if not items:
        return 0

    deleted_count = 0
    
    for i, item in enumerate(items):
        # Suppression selon le type
        if item_type == "vm":
            success = delete_vm_data(client, item)
        else:  # user
            success = delete_user_data(client, item)
            
        if success:
            deleted_count += 1
            
        # Pause si pas le dernier √©l√©ment
        if i < len(items) - 1:
            time.sleep(delay)
    
    # Pause suppl√©mentaire avant prochaine section
    if deleted_count > 0 and item_type == "vm":
        time.sleep(delay + 1)
    
    return deleted_count


# =============================================================================
# FONCTIONS DE SUPPRESSION AVEC AFFICHAGE
# =============================================================================

def delete_items_with_progress(
    client, items: list, item_type: str, delay: float
) -> int:
    """Supprime des √©l√©ments avec barre de progression et affichage"""

    if not items:
        console.print(f"[yellow]‚ö†Ô∏è  Aucun{item_type} √† supprimer[/yellow]")
        return 0

    # Affichage du panneau de suppression
    display_deletion_progress(item_type, delay)

    deleted_count = 0

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        console=console,
    ) as progress:
        task = progress.add_task(
            f"Suppression de {len(items)} {item_type}s...", total=len(items)
        )

        for i, item in enumerate(items):
            # Suppression avec affichage
            if item_type == "vm":
                success = delete_single_vm_with_display(client, item)
            else:  # user
                success = delete_single_user_with_display(client, item)

            if success:
                deleted_count += 1

            progress.update(task, advance=1)

            # Pause si pas le dernier √©l√©ment
            if i < len(items) - 1:
                display_pause_message(delay)

    # Affichage du r√©sultat
    display_deletion_result(item_type, deleted_count, len(items))

    # Pause suppl√©mentaire avant prochaine section
    if deleted_count > 0 and item_type == "vm":
        display_pause_message(delay + 1, "Pause avant les utilisateurs")

    return deleted_count


def delete_single_vm_with_display(client, vm: dict) -> bool:
    """Supprime une VM avec affichage"""
    try:
        with console.status(f"Suppression VM {vm['id']}: {vm['name']}..."):
            client.vms.delete(vm["id"])
        display_success_message("VM", vm['name'])
        return True
    except Exception as e:
        display_error_message("VM", vm['id'], str(e))
        return False


def delete_single_user_with_display(client, user: dict) -> bool:
    """Supprime un utilisateur avec affichage"""
    try:
        with console.status(f"Suppression utilisateur {user['id']}: {user['name']}..."):
            client.users.delete_user(user["id"])
        display_success_message("Utilisateur", user['name'])
        return True
    except Exception as e:
        display_error_message("User", user['id'], str(e))
        return False


# =============================================================================
# LOGIQUE M√âTIER PRINCIPALE
# =============================================================================

def cleanup_data(client, vms: list, users: list, delay: float) -> Tuple[int, int]:
    """Logique m√©tier principale de nettoyage
    
    Args:
        client: Client API
        vms: Liste des VMs
        users: Liste des utilisateurs
        delay: D√©lai entre suppressions
        
    Returns:
        Tuple (deleted_vms, deleted_users)
    """
    # Suppression des VMs puis des utilisateurs
    deleted_vms = delete_items_with_progress(client, vms, "vm", delay)
    deleted_users = delete_items_with_progress(client, users, "user", delay)
    
    return deleted_vms, deleted_users


def show_summary(vms: list, users: list, deleted_vms: int, deleted_users: int) -> None:
    """Affiche le r√©sum√© final"""
    total_deleted = deleted_vms + deleted_users

    summary_table = Table(title="üéØ R√©sum√© du nettoyage")
    summary_table.add_column("Type", style="cyan")
    summary_table.add_column("Supprim√©", style="green")
    summary_table.add_column("Total", style="yellow")

    summary_table.add_row("VMs", str(deleted_vms), str(len(vms)))
    summary_table.add_row("Utilisateurs", str(deleted_users), str(len(users)))
    summary_table.add_row(
        "**TOTAL**",
        f"[bold]{total_deleted}[/bold]",
        f"[bold]{len(vms) + len(users)}[/bold]",
    )

    console.print(summary_table)
    console.print(
        Panel.fit(
            "[bold green]‚úÖ NETTOYAGE TERMIN√â AVEC SUCC√àS ![/bold green]",
            border_style="green",
        )
    )


# =============================================================================
# FONCTION PRINCIPALE ORCHESTRANT TOUT
# =============================================================================

def quick_cleanup(
    base_url: Optional[str] = None,
    email: Optional[str] = None,
    password: Optional[str] = None,
    simulate: bool = True,
    delay: float = 2.5,
) -> None:
    """Fonction principale orchestrant le nettoyage"""
    try:
        # 1. AFFICHAGE - En-t√™te selon le mode
        display_header(simulate)

        # 2. DONN√âES - Connexion et r√©cup√©ration
        client = connect_to_api(base_url, email, password)
        display_api_config(client)
        vms, users = fetch_data(client)

        # 3. AFFICHAGE - Configuration des op√©rations
        display_operation_config(delay, simulate)

        # 4. LOGIQUE M√âTIER - Si simulation, arr√™t ici
        if simulate:
            display_simulation_message()
            return

        # 5. LOGIQUE M√âTIER - Suppressions r√©elles
        deleted_vms, deleted_users = cleanup_data(client, vms, users, delay)

        # 6. AFFICHAGE - R√©sum√© final
        show_summary(vms, users, deleted_vms, deleted_users)

    except Exception as e:
        console.print(f"[bold red]‚ùå Erreur critique: {e}[/bold red]")
        raise typer.Exit(1)


@app.command()
def cleanup(
    base_url: Optional[str] = typer.Option(
        None, "--base-url", "-u", help="URL de base de l'API"
    ),
    email: Optional[str] = typer.Option(
        None, "--email", "-e", help="Email pour l'authentification"
    ),
    password: Optional[str] = typer.Option(
        None, "--password", "-p", help="Mot de passe pour l'authentification"
    ),
    real: bool = typer.Option(
        False, "--real", "-r", help="Effectue la suppression r√©elle"
    ),
    delay: float = typer.Option(
        2.5, "--delay", "-d", help="D√©lai en secondes entre les op√©rations"
    ),
) -> None:
    """
    Script de nettoyage pour les VMs et utilisateurs

    üí° Exemples d'usage:

    ‚Ä¢ Mode simulation (par d√©faut):
       python quick_cleanup_simplified.py

    ‚Ä¢ Suppression r√©elle:
       python quick_cleanup_simplified.py --real

    ‚Ä¢ Avec d√©lai personnalis√©:
       python quick_cleanup_simplified.py --real --delay 3
    """
    simulate = not real
    quick_cleanup(base_url, email, password, simulate, delay)


def main():
    """Point d'entr√©e principal"""
    app()


if __name__ == "__main__":
    main()
